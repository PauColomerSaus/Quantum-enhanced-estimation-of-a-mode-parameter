import qutip as q
import numpy as np
import matplotlib.pyplot as plt

dataHG=[]
dataLG=[]
dataHGy=[]

x=np.linspace(2,15,13)
angles=np.linspace(0,2*np.pi,400)
theta = np.arange(0, 2*np.pi+np.pi/4, step=(np.pi/4))

N=2



for alpha in angles:
    cte=[1j*np.cos(alpha),1j*np.sin(alpha),1j/np.sqrt(2)*np.exp(1j*alpha)]
    d1=[4*np.sin(alpha)**2, 4*np.cos(alpha)**2, 2]
    d2=[4*(1+np.cos(alpha)**2), 4*(1+np.sin(alpha)**2) , 6]        
    
    for g in range(3):
    
        #This creates our hamiltonian
        H=0*q.num(N+1)
        for k in range(N):
            h=(np.sqrt((k+1)*(N-k))*(cte[g]*q.basis(N+1,k+1)*q.basis(N+1,k).dag()+
                       np.conj(cte[g])*q.basis(N+1,k)*q.basis(N+1,k+1).dag()))
            H=H+h
            
        #This adds the d1 d2 terms
        Nd=d2[g]*q.num(N+1)
        for k in range(N):
            Nd1=d1[g]*(N-k)*q.basis(N+1,k)*q.basis(N+1,k).dag()
            Nd=Nd1+Nd
                
        #The best one is the maximum eigenvalue of the operator:
        S=4*H**2+Nd
        lmax=(S.eigenstates()[0])[N]
        smax=(S.eigenstates()[1])[N] 
        Fmax=4*q.expect(H**2,smax)-4*q.expect(H,smax)**2+q.expect(Nd,smax)
        
        if g==0:
            dataHG.append(Fmax)
        if g==1:
            dataHGy.append(Fmax)
        if g==2:
            dataLG.append(Fmax)
       
#plot figure
plt.plot(angles,dataHG,label='$HG_{00}$ and $HG_{10}$')
plt.plot(angles,dataHGy,label='$HG_{00}$ and $HG_{01}$')
plt.plot(angles,dataLG,label='$LG_{0}^0$ and $LG_{0}^1$')
plt.xticks(theta, ['0','$\u03C0$/4','$\u03C0$/2','3$\u03C0$/4',
    '$\u03C0$','5$\u03C0$/4','3$\u03C0$/2','7$\u03C0$/4','2$\u03C0$'])
plt.margins(x=0)
plt.legend()
plt.xlabel('Displacement angle')
plt.ylabel('Sensitivity $\cdot w_0^2$')
plt.show()

#calculate the average
avLG=np.round(np.average(dataLG))
avHG=np.round(np.average(dataHG))
avHGy=np.round(np.average(dataHGy))

#compare the averages
if avLG>avHG:
    print('Laguerre modes give a',(avLG-avHG)*100/(avLG),
          '% better sensitivity on average')
if avLG==avHG:
    print('Laguerre and Hermite modes give the same sensitivity on average')
if avLG<avHG:
    print('Hermite modes give a ',(-avLG+avHG)*100/(avLG) ,
          '% better sensitivity on average')
